'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { runGenerateOceanArticles } from '@/lib/actions';
import { type OceanArticleOutput } from '@/ai/flows/generate-ocean-articles';
import { Loader2, Sparkles, AlertCircle, Newspaper, ArrowRight } from 'lucide-react';
import Link from 'next/link';

type Article = OceanArticleOutput['articles'][0];

const topics = ['Latest Discoveries', 'Unique Fisheries', 'Deep Ocean Creatures'];

export default function OceanArticles() {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(true);
  const [articles, setArticles] = useState<Article[]>([]);
  const [currentTopic, setCurrentTopic] = useState(topics[0]);

  const fetchArticles = async (topic: string) => {
    setIsLoading(true);
    setArticles([]);
    try {
      const response = await runGenerateOceanArticles({ topic });
      setArticles(response.articles);
    } catch (error) {
      console.error(error);
      toast({
        variant: 'destructive',
        title: 'Failed to Fetch Articles',
        description: 'An error occurred while generating the articles.',
        action: <AlertCircle />,
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchArticles(currentTopic);
  }, [currentTopic]);

  return (
    <div className='space-y-6'>
      <Card className="w-full bg-card/70 backdrop-blur-lg">
        <CardHeader>
          <CardTitle className="text-accent flex items-center gap-2">
            <Newspaper /> AI-Generated Ocean Articles
          </CardTitle>
          <CardDescription>
            Explore the latest articles on marine science, generated by AI. Select a topic to begin.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2">
            {topics.map(topic => (
              <Button
                key={topic}
                variant={currentTopic === topic ? 'default' : 'outline'}
                onClick={() => setCurrentTopic(topic)}
                disabled={isLoading}
                className={currentTopic === topic ? 'bg-accent hover:bg-accent/90' : ''}
              >
                {isLoading && currentTopic === topic ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                {topic}
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {isLoading && Array.from({ length: 3 }).map((_, index) => (
          <Card key={index} className="w-full bg-card/70 backdrop-blur-lg animate-pulse">
            <CardHeader>
              <div className='h-6 bg-muted rounded w-3/4'></div>
            </CardHeader>
            <CardContent>
              <div className='space-y-2'>
                <div className='h-4 bg-muted rounded w-full'></div>
                <div className='h-4 bg-muted rounded w-full'></div>
                <div className='h-4 bg-muted rounded w-2/3'></div>
              </div>
            </CardContent>
            <CardFooter>
                 <div className='h-10 bg-muted rounded w-32'></div>
            </CardFooter>
          </Card>
        ))}

        {!isLoading && articles.map((article, index) => (
          <Card key={index} className="flex flex-col w-full bg-card/70 backdrop-blur-lg">
            <CardHeader>
              <CardTitle className="text-lg text-primary">{article.title}</CardTitle>
            </CardHeader>
            <CardContent className="flex-grow">
              <p className="text-muted-foreground text-sm">{article.summary}</p>
            </CardContent>
            <CardFooter>
              <Button asChild variant="link" className="p-0 h-auto text-accent">
                <Link href={article.link} target="_blank" rel="noopener noreferrer">
                  Read Full Article <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
       {!isLoading && articles.length === 0 && (
         <Card className="w-full bg-card/70 backdrop-blur-lg">
            <CardContent className='pt-6'>
                <p>No articles found for this topic.</p>
            </CardContent>
         </Card>
      )}
    </div>
  );
}
